{"version":3,"sources":["components/Doctor.js","components/Data.jsx","App.js","serviceWorker.js","index.js"],"names":["Doctor","props","react_default","a","createElement","data","map","item","Fragment","DoctorName","charge","type","slots","slot","onClick","temp","clinicName","alert","concat","handleSomething","handleSlots","time","style","margin","Data","display","color","fontFamily","fontSize","clinicData","clinic_name","address","fontWeight","backgroundColor","components_Doctor","doctors","name","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setClinicData","className","console","log","cc","filter","handleClick","components_Data","findslot","find","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8b66096.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Doctor(props) {\n    // console.log(props)\n\n    const handleSlots =(slot,temp,DoctorName,clinicName)=> {\n        alert(`This ${slot} for Doctor ${DoctorName} is now Booked`)\n        // console.log(slot,temp)\n        props.handleSomething(slot,temp,DoctorName,clinicName)\n\n    }\n  return (\n    <div>\n        {props.data.map((item)=> {\n            return(\n                <>\n                 Name : {item.DoctorName}\n                 <br/>\n                 Price : {item.charge} <br/>\n                 Specialist : {item.type}\n                 <br/>\n                 {item.slots.map((slot)=> {\n                     return(\n                         <div onClick={()=> slot.temp  && handleSlots(slot.time,slot.temp,item.DoctorName,props.clinicName)} style={{margin:\"10px\"}}>\n                         - {slot.time} \n                          {slot.temp ? 'Available' : 'Already Booked'}\n                         </div>\n                     )\n                 })}\n                  <br/>\n                  <hr/>\n                </>\n            )\n        })}\n    </div>\n  )\n}\n\nexport default Doctor","import React from 'react'\nimport Doctor from './Doctor'\n\nfunction Data(props) {\n    // console.log(props)\n  return (\n    <div style={{display:\"grid\", }}>\n        <div  style={{color:\"red\" ,fontFamily:\"sans-serif\",fontSize:\"35px\",}}>\n        Clinic Name = {props.clinicData.clinic_name} <br/>\n        </div>\n       <div  style={{color:\"yellow\" ,fontFamily:\"sans-serif\",fontSize:\"17px\",}}>\n       Adress = {props.clinicData.address} \n       </div>\n        <div style={{margin:\"10px\"}}></div>\n        <div style={{color:\"black\" ,fontFamily:\"sans-serif\",fontSize:\"25px\", fontWeight:\"10px\" ,backgroundColor:\"#90A4AE\"}}>\n        <Doctor data={props.clinicData.doctors} clinicName={props.clinicData.name} handleSomething={props.handleSomething}/>\n        </div>\n        \n    </div>\n  )\n}\n\nexport default Data","import React from \"react\";\nimport Data from \"./components/Data\";\n\nconst App = () => {\n  let data = [\n    {\n      name: \"Clinic-1\",\n      clinic_name: \"Appolo Hospital\",\n      address: \"Patna\",\n      doctors: [\n        {\n          DoctorName: \"Prasant kumar\",\n          type: \"dermotolist\",\n          charge: \"200\",\n          slots: [\n            {\n              temp: false,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Aman kumar\",\n          type: \"radiology\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Arun Kumar Singh\",\n          type: \"Dentist\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Nitish Kumar\",\n          type: \"physiology\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: \"Clinic-2\",\n      clinic_name: \"Surya Hospital\",\n      address: \"Delhi\",\n      doctors: [\n        {\n          DoctorName: \"Kishor kumar\",\n          type: \"dermotolist\",\n          charge: \"200\",\n          slots: [\n            {\n              temp: false,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Ranjeet Modi MBBS\",\n          type: \"radiology\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Amit Singh\",\n          type: \"Dentist\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n        {\n          DoctorName: \"Arun Kumar jha\",\n          type: \"physiology\",\n          charge: \"300\",\n          slots: [\n            {\n              temp: true,\n              time: \"3:00\",\n            },\n            {\n              temp: true,\n              time: \"3:20\",\n            },\n            {\n              temp: true,\n              time: \"3:40\",\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [clinicData, setClinicData] = React.useState(data[0]);\n\n  const handleClick = (name) => {\n    console.log(name);\n    const cc = data.filter((item) => name === item.name);\n    setClinicData(cc[0]);\n  };\n\n  const handleSomething = (slot, temp, DoctorName, clinicName) => {\n    // console.log('___',slot,temp,DoctorName,clinicName)\n    // const findClinic = data.forEach((item)=> {\n    //   if(item.name === clinicName){\n    //     item.doctors.forEach((doc)=> {\n    //       if(doc.DoctorName === DoctorName){\n    //         doc.slots.forEach((slots)=> {\n    //           if(slots.time === slot){\n    //             slots.temp = false\n    //           }\n    //         })\n    //       }\n    //     })\n    //   }\n\n    // })\n    const findClinic = data.find((item) => item.name === clinicName);\n    const finddoc = findClinic.doctors.find(\n      (item) => item.DoctorName === DoctorName\n    );\n    // const tt= data[0].doctors[0].slots[1].temp = false\n    const findslot = finddoc.slots.find((item) => item.time === slot);\n    findslot.temp = false;\n    console.log(findslot);\n    setClinicData(data[0]);\n    console.log(data);\n  };\n  // console.log(clinicData.address);\n  return (\n    <div style={{ display: \"flex\",backgroundColor:\"black\" }}>\n      <div>\n        {data.map((item) => {\n          return (\n            <div className=\"active\">\n              <div onClick={() => handleClick(item.name)}>\n                <h3 style={{color:\"white\"}}> {item.name}</h3>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      <div style={{ margin: \"50px\" }}></div>\n      <Data clinicData={clinicData} handleSomething={handleSomething} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}